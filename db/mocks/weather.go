// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/weather.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/kenkwlai/weather-server/models"
	reflect "reflect"
)

// MockWeatherStore is a mock of WeatherStore interface
type MockWeatherStore struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherStoreMockRecorder
}

// MockWeatherStoreMockRecorder is the mock recorder for MockWeatherStore
type MockWeatherStoreMockRecorder struct {
	mock *MockWeatherStore
}

// NewMockWeatherStore creates a new mock instance
func NewMockWeatherStore(ctrl *gomock.Controller) *MockWeatherStore {
	mock := &MockWeatherStore{ctrl: ctrl}
	mock.recorder = &MockWeatherStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherStore) EXPECT() *MockWeatherStoreMockRecorder {
	return m.recorder
}

// GetWeather mocks base method
func (m *MockWeatherStore) GetWeather(cityName string) (*models.CurrentWeatherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", cityName)
	ret0, _ := ret[0].(*models.CurrentWeatherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather
func (mr *MockWeatherStoreMockRecorder) GetWeather(cityName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherStore)(nil).GetWeather), cityName)
}

// CreateWeather mocks base method
func (m *MockWeatherStore) CreateWeather(weather *models.CurrentWeatherData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWeather", weather)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWeather indicates an expected call of CreateWeather
func (mr *MockWeatherStoreMockRecorder) CreateWeather(weather interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWeather", reflect.TypeOf((*MockWeatherStore)(nil).CreateWeather), weather)
}
